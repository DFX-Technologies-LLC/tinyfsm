API Reference
=============

`#include <tinyfsm.hpp>`


Class Diagram
-------------
                                           .......
    +--------------------------------------:  T  :
    | tinyfsm::FsmList                     :.....:
    +-----------------------------------------|
    | [+] set_initial_state()     <<static>>  |
    | [+] reset()                 <<static>>  |
    | [+] enter()                 <<static>>  |
    | [+] start()                 <<static>>  |
    | [+] dispatch(Event)         <<static>>  |
    +-----------------------------------------+


                                           .......
    +--------------------------------------:  T  :
    | tinyfsm::Fsm                         :.....:
    +-----------------------------------------|
    | [+] state<S>()              <<static>>  |
    | [+] set_initial_state()     <<static>>  |
    | [+] reset()                 <<static>>  |
    | [+] enter()                 <<static>>  |
    | [+] start()                 <<static>>  |
    | [+] dispatch(Event)         <<static>>  |
    | [+] transit<S>()                        |
    | [+] transit<S>(Action)                  |
    | [+] transit<S>(Action, Condition)       |
    +-----------------------------------------+
                         #
                         |
                         |
              +---------------------+
              | MyFSM               |
              +---------------------+
              | [+] entry()         |
              | [+] exit()          |
              | [+] react(EventX)   |
              | [+] react(EventY)   |
              | ...                 |
              +---------------------+
                         #
                         |
           +-------------+-------------+
           |             |             |
      +---------+   +---------+   +---------+
      | State_A |   | State_B |   | ...     |
      +---------+   +---------+   +---------+


    [#]  protected
    [+]  public
    [-]  private


template< typename F > struct Fsm
---------------------------------


### State Machine Functions

- `template< typename S > static constexpr S const & state(void)`

  Returns a reference to state S.


- `static void set_initial_state(void)`

  Function prototype, must be defined (explicit template
  specialization) for every state machine class (e.g. by using the
  `FSM_INITIAL_STATE(fsm, state`) macro). Sets current state to
  initial (start) state.


- `static void reset(void)`

  Empty function, can be overridden by state machine class in order to
  perform custom initialization (e.g. set static state machine
  variables, or reset states using `StateList<MyStates...>::reset()`).
  Note that this function is NOT called on start().


- `static void enter(void)`

  Helper function, usually not needed to be used directly:
  calls entry() method of current state.


- `static void start()`

  Sets the initial (start) state and calls its entry() method.


- `template< typename E > static void dispatch(E const &)`

  Dispatch an event to the current state of this state machine.


### State Transition Functions

- `template< typename S > void transit(void)`

  Transit to a new state:

  1. Call exit() method on current state
  2. Set new current state to S
  3. Call entry() method on new state


- `template< typename S, typename ActionFunction > void transit(ActionFunction)`

  Transit to a new state, with action function:

  1. Call exit() method on current state
  2. Call ActionFunction
  3. Set new current state to S
  4. Call entry() method on new state


- `template< typename S, typename ActionFunction, typename ConditionFunction > void transit(ActionFunction, ConditionFunction)`

  Calls ConditionFunction. If it returns true, calls
  `transit<S>(ActionFunction)`.


template< typename... FF > FsmList
----------------------------------

- `static void set_initial_state(void)`

  Calls set_initial_state() on all state machines in the list.

- `static void reset()`

  Calls reset() on all state machines in the list.


- `static void enter()`

  Calls enter() on all state machines in the list.


- `static void start()`

  Sets the initial (start) state for all state machines in list, then
  call all entry() methods.


- `template< typename E > static void dispatch(E const &)`

  Dispatch an event to the current state of all the state machines in
  the list.
